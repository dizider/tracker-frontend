import './main.css';
import { Elm } from './Main.elm';
import * as serviceWorker from './serviceWorker';
import './helpers'

var script = document.createElement('script');
script.setAttribute('type', 'text/javascript');
script.setAttribute('src', 'https://api.mapy.cz/loader.js');
document.head.appendChild(script);
script.onload = initApp;

const rootNode = document.getElementById('root')

let map
let lineColor = "#f00"
let lastPosMarkerCard
let markersLayer
let liveMarkers = {} // last positions of all live tracks

let rootUrl = "***REMOVED***" //window.location.host
let ssl = (window.location.protocol === "https:")
let wsUrl = "wss" + (ssl ? "s" : "") + "://" + rootUrl + "/subscribe";
let wsSocket = new WebSocket(wsUrl)

console.log(wsUrl)

function makeMarker(lat, lon, title, text, img) {
    lastPosMarkerCard = new SMap.Card()
    lastPosMarkerCard.getHeader().innerHTML = "<strong>" + text + "</strong>"
    lastPosMarkerCard.getBody().innerHTML = ""

    let markerContent = JAK.mel("div")
    let pic = JAK.mel("img", {src: img})
    markerContent.appendChild(pic)

    let markerTitle = JAK.mel("div", {}, {
        position: "absolute",
        left: "0px",
        top: "2px",
        textAlign: "center",
        width: "22px",
        color: "white",
        fontWeight: "bold"
    })
    markerTitle.innerHTML = title
    markerContent.appendChild(markerTitle)

    let coords = SMap.Coords.fromWGS84(lon, lat);
    let marker = new SMap.Marker(coords, null, {url: markerContent});
    marker.decorate(SMap.Marker.Feature.Card, lastPosMarkerCard)
    return marker
}

/* Fetch back generated bytes from the local storage */
function rememberedBytes() {
    const bytes = localStorage.getItem("bytes");
    return bytes ? bytes.split(",").map(x => parseInt(x, 10)) : null;
}

function persistedToken() {
    const token = localStorage.getItem("token")
    return token ? token : null;
}

function initApp() {
    const app = Elm.Main.init({
        node: rootNode,
        flags: {
            clientId: "***REMOVED***", //process.env.CLIENT_ID,
            state: rememberedBytes(),
            token: persistedToken()
        }
    });

    wsSocket.addEventListener('open', function (event) {
        console.log('Server WS connected!');
    });
    
    wsSocket.addEventListener('message', function (event) {
        if (event.data.startsWith("!!")) {
            console.log('Message from server ' + event.data);
            alert("WS: " + event.data)
            return
        }
    
        let coords = JSON.parse(event.data)
        console.log("Received new coords: " + JSON.stringify(coords))
    
        app.ports.newCoordinatesReceived.send(event.data);
    });

/* Generate high entropy random bytes using the Web Crypto API and
remember them so that they are preserved between redirections. This
allows to protect for XSS & authorization code attacks */
    app.ports.genRandomBytes.subscribe(n => {
        const buffer = new Uint8Array(n);
        crypto.getRandomValues(buffer);
        const bytes = Array.from(buffer);
        localStorage.setItem("bytes", bytes);
        app.ports.randomBytes.send(bytes);
    });

    app.ports.persistToken.subscribe(token => {
        console.log("Persisting token")
        localStorage.setItem("token", token)
    });

    app.ports.removeToken.subscribe(_ => {
        console.log("Removing token")
        localStorage.removeItem("token")
    });

    app.ports.addTrack.subscribe(track => {
        let responseText = track[1]
        let trackId = track[0]
        
        wsSocket.send("coordinates/" + trackId)

        let xmlDoc = JAK.XML.createDocument(responseText)
        let pts = xmlDoc.getElementsByTagName("trkpt")
        let lastPoint = pts[pts.length - 1];
        
        let center = SMap.Coords.fromWGS84(lastPoint.getAttribute("lon"), lastPoint.getAttribute("lat"))
        map.setCenter(center)
        
        let img = SMap.CONFIG.img + "/marker/drop-red.png"
        let desc = "Track id: " +  trackId + "</br> time: " + lastPoint.getElementsByTagName("time")[0].innerHTML + "</br> battery: " + lastPoint.getAttribute("batt")
        let marker = makeMarker(lastPoint.getAttribute("lat"), lastPoint.getAttribute("lon"), "", desc , img)
        markersLayer.addMarker(marker)
        // pass the rest to draw the line
        let gpx = new SMap.Layer.GPX(xmlDoc, null, {maxPoints: 5000, colors: [lineColor]})
        map.addLayer(gpx)
        gpx.enable()
    });

    app.ports.updateCoordinates.subscribe(coords => {
        console.log("Updating coordinates")
        for(let i in coords){
            let c = coords[i]
            let img = SMap.CONFIG.img + "/marker/drop-red.png"
            let desc = "Track id: " +  c.trackId + "</br> time: " + c.time + "</br> battery: " + c.battery
            let marker = makeMarker(c.lat, c.lon, "", desc , img)
            if (liveMarkers[c.trackId] != undefined)
                markersLayer.removeMarker(liveMarkers[c.trackId])
            markersLayer.addMarker(marker)
            liveMarkers[c.trackId] = marker
        }
    });

    // app.ports.reloadMap.subscribe(message => {
    //     let elem = document.getElementById('maps')
    //     console.log(elem)
    //     elem.reload()
    // });

    // app.ports.errorLog.subscribe((errorText) => {
    //     console.error(errorText);
    // });

    // If you want your app to work offline and load faster, you can change
    // unregister() to register() below. Note this comes with some pitfalls.
    // Learn more about service workers: https://bit.ly/CRA-PWA
    serviceWorker.unregister();
}

customElements.define('seznam-maps', class extends HTMLElement {
    constructor() {
        super();
    }

    connectedCallback() {
        console.log("Map is loading");
        // this._screen = document.createElement('div');
        // this._screen.setAttribute("id", "map");
        // this._screen.style.height = this.getAttribute('height');
        // this._screen.style.width = this.getAttribute('width');
        // this.appendChild(this._screen);

        Loader.async = true;
        Loader.load(null, null, this.createMap);
    }

    loadMap() {
        Loader.async = true;
        Loader.load(null, null, this.createMap);
    }

    createMap() {
        this._screen = document.getElementById("map");
        var center = SMap.Coords.fromWGS84(14.41790, 50.12655);
        map = new SMap(JAK.gel(this._screen), center, 13);
        map.addDefaultLayer(SMap.DEF_BASE).enable();
        map.addDefaultControls();

        markersLayer = new SMap.Layer.Marker()
        map.addLayer(markersLayer)
        markersLayer.enable()
    }

    reload() {
        Loader.load();
        var center = SMap.Coords.fromWGS84(14.41790, 50.12655);
        map = new SMap(JAK.gel(this._screen), center, 13);
        map.addDefaultLayer(SMap.DEF_BASE).enable();
        map.addDefaultControls();
    }
});