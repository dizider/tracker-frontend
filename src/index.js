import './main.css';
import { Elm } from './Main.elm';
import * as serviceWorker from './serviceWorker';
import './helpers'
import './mapLoader'
// var script = document.createElement('script');
// script.setAttribute('type', 'text/javascript');
// script.setAttribute('src', 'https://api.mapy.cz/loader.js');
// document.head.appendChild(script);

var meta = document.createElement('meta');
meta.setAttribute('name', 'viewport')
meta.setAttribute('content', 'width=device-width,user-scalable=0,initial-scale=1,minimum-scale=1,maximum-scale=1,viewport-fit=cover')
document.head.appendChild(meta);


const rootNode = document.getElementById('root')

let app
let map
let lastPosMarkerCard
let markersLayer
let liveMarkers = {} // last positions of all live tracks

let rootUrl = "***REMOVED***" //window.location.host
let winUrl = "http://" + window.location.host
let wsUrl = "wss://" + rootUrl + "/subscribe";
let wsSocket

console.log(wsUrl)

initApp()

function makeMarker(lat, lon, title, text, img) {
    lastPosMarkerCard = new SMap.Card()
    lastPosMarkerCard.getHeader().innerHTML = "<strong>" + title + "</strong>"
    lastPosMarkerCard.getBody().innerHTML = text

    let markerContent = JAK.mel("div")
    let pic = JAK.mel("img", { src: img }, { "height": "30px" })
    markerContent.appendChild(pic)

    let markerTitle = JAK.mel("div", {}, {
        position: "absolute",
        left: "0px",
        top: "0px",
        textAlign: "center",
        width: "22px",
        color: "white",
        textShadow: "-1px 0 black, 0 1px black, 1px 0 black, 0 -1px black",
        fontWeight: "bold"
    })
    markerTitle.innerHTML = title
    markerContent.appendChild(markerTitle)

    let coords = SMap.Coords.fromWGS84(lon, lat);
    let marker = new SMap.Marker(coords, null, { url: markerContent });
    marker.decorate(SMap.Marker.Feature.Card, lastPosMarkerCard)
    return marker
}

/* Fetch back generated bytes from the local storage */
function rememberedBytes() {
    const bytes = localStorage.getItem("bytes");
    return bytes ? bytes.split(",").map(x => parseInt(x, 10)) : null;
}

function persistedToken() {
    const token = localStorage.getItem("token")
    return token ? token : null;
}

document.addEventListener("fullscreenchange", () => {
    if (document.fullscreenElement === null) {
        console.log("Exited fullscreen");
    } else {
        console.log("Entered fullscreen");
    }
});

function initApp() {
    Loader.load()

    app = Elm.Main.init({
        node: rootNode,
        flags: {
            clientId: "***REMOVED***", //process.env.CLIENT_ID,
            state: rememberedBytes(),
            token: persistedToken()
        }
    });

    wsSocket = new WebSocket(wsUrl)

    app.ports.genRandomBytes.subscribe(n => {
        const buffer = new Uint8Array(n);
        crypto.getRandomValues(buffer);
        const bytes = Array.from(buffer);
        localStorage.setItem("bytes", bytes);
        app.ports.randomBytes.send(bytes);
    });

    app.ports.persistToken.subscribe(token => {
        console.log("Persisting token")
        localStorage.setItem("token", token)
    });

    app.ports.removeToken.subscribe(_ => {
        console.log("Removing token")
        localStorage.removeItem("token")
    });

    // app.ports.loadMap.subscribe(_ => {

    // });

    app.ports.addTrack.subscribe(track => {
        let responseText = track[1]
        let trackId = track[0]

        wsSocket.send("coordinates/" + trackId)

        let xmlDoc = JAK.XML.createDocument(responseText)
        let pts = xmlDoc.getElementsByTagName("trkpt")
        let lastPoint = pts[pts.length - 1];
        if (lastPoint != undefined) {
            let lineColor = "#" + Math.floor(Math.random() * 16777215).toString(16);

            let center = SMap.Coords.fromWGS84(lastPoint.getAttribute("lon"), lastPoint.getAttribute("lat"))
            map.setCenter(center)

            let img = winUrl + "/drop.svg"
            console.log(img)
            let desc = "Track id: " + trackId + "</br> time: " + lastPoint.getElementsByTagName("time")[0].innerHTML + "</br> battery: " + lastPoint.getAttribute("batt")
            let marker = makeMarker(lastPoint.getAttribute("lat"), lastPoint.getAttribute("lon"), trackId, desc, img)
            markersLayer.addMarker(marker)
            // pass the rest to draw the line
            let gpx = new SMap.Layer.GPX(xmlDoc, null, { maxPoints: 5000, colors: [lineColor] })
            map.addLayer(gpx)
            gpx.enable()
        }
    });

    app.ports.updateCoordinates.subscribe(coords => {
        console.log("Updating coordinates")
        for (let i in coords) {
            let c = coords[i]
            let img = SMap.CONFIG.img + "/marker/drop-red.png"
            let desc = "Track id: " + c.trackId + "</br> time: " + c.time + "</br> battery: " + c.battery
            let marker = makeMarker(c.lat, c.lon, "", desc, img)
            if (liveMarkers[c.trackId] != undefined)
                markersLayer.removeMarker(liveMarkers[c.trackId])
            markersLayer.addMarker(marker)
            liveMarkers[c.trackId] = marker
        }
    });

    app.ports.fullscreenMap.subscribe(_ => {
        if (document.fullscreenElement === null)
            document.getElementById("maps").requestFullscreen();
        else
            document.exitFullscreen();
    });

    // app.ports.reloadMap.subscribe(message => {
    //     let elem = document.getElementById('maps')
    //     console.log(elem)
    //     elem.reload()
    // });

    // app.ports.errorLog.subscribe((errorText) => {
    //     console.error(errorText);
    // });

    // If you want your app to work offline and load faster, you can change
    // unregister() to register() below. Note this comes with some pitfalls.
    // Learn more about service workers: https://bit.ly/CRA-PWA
    serviceWorker.unregister();
}

customElements.define('seznam-maps', class extends HTMLElement {
    constructor() {
        super();
    }

    connectedCallback() {
        console.log("Map is loading");
        this.loadMap()
    }

    loadMap() {
        Loader.lang = "en";
        Loader.async = true;
        Loader.load(null, null, this.createMap);
    }

    createMap() {
        this._screen = document.getElementById("map");
        var center = SMap.Coords.fromWGS84(14.41790, 50.12655);
        map = new SMap(JAK.gel(this._screen), center, 13);

        var sync = new SMap.Control.Sync({ bottomSpace: 0 });
        map.addControl(sync);

        map.addDefaultLayer(SMap.DEF_TURIST).enable()
        map.addDefaultLayer(SMap.DEF_OPHOTO)
        map.addDefaultLayer(SMap.DEF_BASE)
        map.addDefaultControls();

        let layerSwitch = new SMap.Control.Layer({ width: 65, items: 3, page: 3 })
        layerSwitch.addDefaultLayer(SMap.DEF_BASE)
        layerSwitch.addDefaultLayer(SMap.DEF_OPHOTO)
        layerSwitch.addDefaultLayer(SMap.DEF_TURIST)

        map.addControl(layerSwitch, { left: "8px", top: "53px" })

        markersLayer = new SMap.Layer.Marker()
        map.addLayer(markersLayer)
        markersLayer.enable()

        map.getSignals().addListener(window, "map-click", function (e) {
            console.log("map clicked")
            // document.getElementById("maps").requestFullscreen();
        });

        wsSocket.addEventListener('open', function (event) {
            console.log('Server WS connected!');
        });

        wsSocket.addEventListener('message', function (event) {
            if (event.data.startsWith("!!")) {
                console.log('Message from server ' + event.data);
                alert("WS: " + event.data)
                return
            }

            let coords = JSON.parse(event.data)
            console.log("Received new coords: " + JSON.stringify(coords))

            app.ports.newCoordinatesReceived.send(event.data);
        });
    }

    // reload() {
    //     Loader.load();
    //     var center = SMap.Coords.fromWGS84(14.41790, 50.12655);
    //     map = new SMap(JAK.gel(this._screen), center, 13);
    //     map.addDefaultLayer(SMap.DEF_BASE).enable();
    //     map.addDefaultControls();
    // }
});